# Plero 프로젝트 디자인 시스템

## 🎨 색상 팔레트

### CSS 변수 사용 (assets/css/main.css 기준)
```css
/* 텍스트 색상 */
--ui-text-dimmed: var(--color-neutral-400);     /* 희미한 텍스트 */
--ui-text-muted: var(--color-neutral-500);      /* 보조 텍스트 */
--ui-text-toned: var(--color-neutral-600);      /* 톤 다운된 텍스트 */
--ui-text: var(--color-neutral-700);            /* 기본 텍스트 */
--ui-text-highlighted: var(--color-neutral-900); /* 강조 텍스트 */
--ui-text-inverted: var(--color-white);         /* 반전 텍스트 */

/* 배경 색상 */
--ui-bg: var(--color-white);                    /* 기본 배경 */
--ui-bg-muted: var(--color-neutral-50);         /* 보조 배경 */
--ui-bg-elevated: var(--color-neutral-100);     /* 부각된 배경 */
--ui-bg-accented: var(--color-neutral-200);     /* 강조된 배경 */
--ui-bg-inverted: var(--color-neutral-900);     /* 반전 배경 */

/* 테두리 색상 */
--ui-border: var(--color-neutral-200);          /* 기본 테두리 */
--ui-border-muted: var(--color-neutral-200);    /* 보조 테두리 */
--ui-border-accented: var(--color-neutral-300); /* 강조된 테두리 */
--ui-border-inverted: var(--color-neutral-900); /* 반전 테두리 */

/* 프라이머리 색상 */
--ui-primary: var(--color-indigo-400);          /* 기본 프라이머리 */
--ui-primary-muted: var(--color-indigo-500);    /* 보조 프라이머리 */
--ui-primary-elevated: var(--color-indigo-600); /* 부각된 프라이머리 */
--ui-primary-accented: var(--color-indigo-700); /* 강조된 프라이머리 */
--ui-primary-inverted: var(--color-indigo-800); /* 반전 프라이머리 */
```

### 사용 방법
```css
/* 올바른 방법 */
color: var(--ui-text);
background: var(--ui-bg-muted);

/* 피해야 할 방법 */
color: #374151;
background: #f9fafb;
```

## 🏗️ 레이아웃 패턴

### 1. 페이지 기본 구조
```vue
<template>
    <div class="min-h-screen bg-[var(--ui-bg)]">
        <!-- 상단 헤더 (고정) -->
        <div class="sticky top-0 z-10 bg-[var(--ui-bg)] border-b-[1px] border-[var(--ui-border)] shadow-sm">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <!-- 헤더 내용 -->
            </div>
        </div>

        <!-- 메인 컨텐츠 -->
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <!-- 콘텐츠 -->
        </div>
    </div>
</template>
```

### 2. 헤더 패턴
```vue
<div class="flex justify-between items-center py-4 flex-wrap gap-4">
    <!-- 왼쪽: 브레드크럼/네비게이션 -->
    <div class="flex items-center gap-2 text-sm">
        <button class="flex items-center gap-2 text-[var(--ui-text-muted)] hover:text-[var(--ui-text)] transition-colors duration-200 group">
            <Icon icon="material-symbols:arrow-back" width="20" height="20" class="group-hover:scale-110 transition-transform duration-200" />
            <span class="font-medium">뒤로가기</span>
        </button>
        <div class="ml-2 h-6 w-px bg-[var(--ui-border)]"></div>
        <h1 class="ml-2 text-lg font-semibold text-[var(--ui-text)]">페이지 제목</h1>
    </div>
    
    <!-- 오른쪽: 액션 버튼들 -->
    <div class="flex items-center gap-3">
        <!-- 버튼들 -->
    </div>
</div>
```

### 3. 카드 컴포넌트
```vue
<div class="bg-[var(--ui-bg)] border border-[var(--ui-border)] rounded-xl shadow-sm overflow-hidden">
    <!-- 카드 헤더 (선택사항) -->
    <div class="px-6 py-4 border-b border-[var(--ui-border)] bg-[var(--ui-bg-muted)]">
        <h2 class="text-lg font-semibold text-[var(--ui-text-highlighted)]">카드 제목</h2>
    </div>
    
    <!-- 카드 내용 -->
    <div class="p-6">
        <!-- 콘텐츠 -->
    </div>
</div>
```

## 🔘 버튼 패턴

### 1. 프라이머리 버튼 (강조 액션)
```vue
<button class="flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-[var(--ui-primary)] to-[var(--ui-primary-muted)] text-white rounded-lg hover:from-[var(--ui-primary-muted)] hover:to-[var(--ui-primary-elevated)] transition-all duration-200 shadow-md hover:shadow-lg">
    <Icon icon="material-symbols:save" width="16" height="16" />
    <span class="text-sm font-medium">저장</span>
</button>
```

### 2. 세컨더리 버튼 (보조 액션)
```vue
<button class="flex items-center gap-2 px-3 py-2 text-[var(--ui-text-muted)] hover:text-[var(--ui-text)] border border-[var(--ui-border)] rounded-lg hover:bg-[var(--ui-bg-muted)] transition-all duration-200">
    <Icon icon="material-symbols:edit" width="16" height="16" />
    <span class="text-sm font-medium">편집</span>
</button>
```

### 3. 위험 액션 버튼
```vue
<button class="flex items-center gap-2 px-3 py-2 text-[var(--ui-text-muted)] hover:text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-all duration-200">
    <Icon icon="material-symbols:delete-outline" width="16" height="16" />
    <span class="text-sm font-medium">삭제</span>
</button>
```

## 🎯 아이콘 사용법

### Iconify 사용
```vue
<script setup>
import { Icon } from '@iconify/vue';
</script>

<template>
    <!-- 기본 사용법 -->
    <Icon icon="material-symbols:home-outline" width="20" height="20" />
    
    <!-- 호버 효과와 함께 -->
    <Icon icon="material-symbols:arrow-back" width="20" height="20" class="group-hover:scale-110 transition-transform duration-200" />
</template>
```

### 자주 사용하는 아이콘들
- `material-symbols:arrow-back` - 뒤로가기
- `material-symbols:edit` - 편집
- `material-symbols:save` - 저장
- `material-symbols:delete-outline` - 삭제
- `material-symbols:history` - 변경 기록
- `material-symbols:visibility` - 보기
- `material-symbols:home-outline` - 홈
- `material-symbols:add-circle-outline` - 추가
- `material-symbols:check-circle-outline` - 완료/확인

## 🌙 다크 모드 지원

### CSS 변수 자동 변환
다크 모드는 CSS 변수를 통해 자동으로 처리됩니다. `.dark` 클래스가 적용되면 색상이 자동으로 변경됩니다.

### 특별한 처리가 필요한 경우
```vue
<style scoped>
.my-element {
    @apply bg-green-50 text-green-700;
}

/* 다크 모드 전용 스타일 */
.dark .my-element {
    @apply bg-green-900/20 text-green-300;
}
</style>
```

## 📱 반응형 디자인

### 브레이크포인트 (Tailwind CSS 기준)
- `sm:` - 640px 이상
- `md:` - 768px 이상
- `lg:` - 1024px 이상
- `xl:` - 1280px 이상

### 반응형 패턴 예시
```vue
<div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
    <!-- 모바일: 1열, 데스크톱: 4열 -->
</div>

<div class="flex-col items-start gap-4 lg:flex-row lg:items-center">
    <!-- 모바일: 세로 배치, 데스크톱: 가로 배치 -->
</div>
```

## ✨ 애니메이션 및 트랜지션

### 표준 트랜지션
```css
transition-colors duration-200   /* 색상 변화 */
transition-all duration-200      /* 모든 속성 변화 */
transition-transform duration-200 /* 변형 효과 */
```

### 호버 효과
```vue
<!-- 스케일 효과 -->
<div class="group-hover:scale-110 transition-transform duration-200">

<!-- 이동 효과 -->
<div class="group-hover:translate-x-1 transition-transform duration-200">

<!-- 색상 변화 -->
<div class="hover:text-[var(--ui-text)] transition-colors duration-200">
```

## 🔤 타이포그래피

### 제목 크기
```vue
<h1 class="text-3xl font-bold text-[var(--ui-text-highlighted)]">    <!-- 메인 제목 -->
<h2 class="text-2xl font-bold text-[var(--ui-text-highlighted)]">    <!-- 섹션 제목 -->
<h3 class="text-lg font-semibold text-[var(--ui-text)]">             <!-- 서브 제목 -->
<h4 class="text-sm font-semibold text-[var(--ui-text)]">             <!-- 작은 제목 -->
```

### 본문 텍스트
```vue
<p class="text-[var(--ui-text)]">                    <!-- 기본 텍스트 -->
<span class="text-[var(--ui-text-muted)]">           <!-- 보조 텍스트 -->
<small class="text-xs text-[var(--ui-text-muted)]">  <!-- 작은 텍스트 -->
```

## 🗂️ 코드 및 diff 스타일

### 모노스페이스 폰트
```vue
<div class="font-mono text-sm">
    <!-- 코드 내용 -->
</div>
```

### Diff 색상
```vue
<!-- 추가된 내용 -->
<span class="bg-green-50 text-green-700 dark:bg-green-900/20 dark:text-green-300 px-1 rounded">

<!-- 제거된 내용 -->
<span class="bg-red-50 text-red-700 dark:bg-red-900/20 dark:text-red-300 px-1 rounded line-through">
```

## 📏 간격 및 패딩

### 표준 간격
- `gap-2` (8px) - 작은 요소 간격
- `gap-3` (12px) - 버튼 그룹 간격  
- `gap-4` (16px) - 일반적인 간격
- `gap-6` (24px) - 섹션 간격

### 패딩
- `p-4` (16px) - 작은 카드 패딩
- `p-6` (24px) - 일반적인 카드 패딩
- `px-4 py-2` - 버튼 패딩
- `px-6 py-4` - 카드 헤더 패딩

## 🎛️ 상태 표시

### 로딩 상태
```vue
<Icon v-if="loading" icon="line-md:loading-loop" width="18" height="18" />
```

### 빈 상태
```vue
<div class="text-center py-12">
    <Icon icon="material-symbols:check-circle-outline" width="48" height="48" class="mx-auto text-[var(--ui-text-muted)] mb-4" />
    <h3 class="text-lg font-medium text-[var(--ui-text)] mb-2">데이터 없음</h3>
    <p class="text-[var(--ui-text-muted)]">표시할 내용이 없습니다.</p>
</div>
```

## 🧩 위키 전용 컴포넌트

### FavoriteListItem 컴포넌트
즐겨찾기 목록 아이템을 담당하는 재사용 가능한 컴포넌트입니다.

#### Props
```typescript
interface Props {
    list: FavoritesList;        // 즐겨찾기 목록 데이터
    index: number;              // 목록 인덱스 (체크박스 ID용)
    isChecked: boolean;         // 체크 상태
    isEditing: boolean;         // 편집 모드 여부
    editingName: string;        // 편집 중인 이름
    loading: boolean;           // 로딩 상태
}
```

#### Events
```typescript
interface Emits {
    (e: 'toggle', list: FavoritesList): void;                    // 체크박스 토글
    (e: 'context-menu', event: MouseEvent, list: FavoritesList): void; // 우클릭 컨텍스트 메뉴
    (e: 'start-editing'): void;                                  // 편집 시작
    (e: 'finish-editing', name: string): void;                   // 편집 완료
    (e: 'cancel-editing'): void;                                 // 편집 취소
    (e: 'update-editing-name', name: string): void;              // 편집 중 이름 업데이트
}
```

#### 사용 예시
```vue
<FavoriteListItem 
    :list="list"
    :index="index"
    :is-checked="favoritedListIds.includes(list.id)"
    :is-editing="editingListId === list.id"
    :editing-name="editingListName"
    :loading="loading"
    @toggle="toggleListFavorite"
    @context-menu="showContextMenuHandler"
    @start-editing="startEditingList"
    @finish-editing="finishEditingList"
    @cancel-editing="cancelEditingList"
    @update-editing-name="editingListName = $event" />
```

#### 특징
- **이중 모드 지원**: 일반 표시 모드와 편집 모드 간 전환
- **키보드 지원**: Enter(저장), Escape(취소) 키 지원
- **컨텍스트 메뉴**: 우클릭으로 편집/삭제 메뉴 표시
- **접근성**: 적절한 label과 체크박스 연결
- **상태 표시**: 기본 목록 배지, 즐겨찾기 상태 아이콘

### StarButton 컴포넌트
위키 즐겨찾기 기능을 제공하는 복합 버튼 컴포넌트입니다.

#### Props
```typescript
interface Props {
    wikiId: string;             // 위키 ID
    initialStarCount?: number;  // 초기 스타 수 (서버사이드 렌더링용)
}
```

#### 주요 기능
- **분할 버튼**: 메인 즐겨찾기 버튼 + 드롭다운 토글
- **지연 로딩**: 드롭다운 열 때만 사용자 데이터 로드
- **다중 목록 지원**: 여러 즐겨찾기 목록에 추가/제거 가능
- **목록 관리**: 새 목록 생성, 이름 수정, 목록 삭제
- **실시간 업데이트**: 즐겨찾기 상태 실시간 반영

### AuthorizePopup 컴포넌트
로그인이 필요한 기능에 접근할 때 표시되는 모달 팝업 컴포넌트입니다.

#### Props
```typescript
interface Props {
    visible?: boolean;          // 팝업 표시 여부
    title?: string;             // 팝업 제목 (기본: "로그인이 필요합니다")
    message?: string;           // 팝업 메시지 (기본: "이 기능을 사용하려면 로그인이 필요합니다.")
    requiredFeature?: string;   // 필요한 기능명 (배지로 표시)
    returnUrl?: string;         // 로그인 후 돌아갈 URL
}
```

#### Events
```typescript
interface Emits {
    (e: 'close'): void;         // 팝업 닫기
    (e: 'login'): void;         // 로그인 버튼 클릭
}
```

#### 사용 예시
```vue
<template>
    <div>
        <!-- 로그인이 필요한 기능 버튼 -->
        <button @click="handleProtectedAction" class="...">
            즐겨찾기 추가
        </button>

        <!-- 인증 팝업 -->
        <AuthorizePopup 
            :visible="showAuthPopup"
            title="즐겨찾기 기능 이용하기"
            message="즐겨찾기를 사용하려면 로그인이 필요합니다."
            required-feature="즐겨찾기"
            :return-url="currentRoute"
            @close="showAuthPopup = false"
            @login="handleLogin" />
    </div>
</template>

<script setup>
const { loggedIn } = useUserSession();
const route = useRoute();
const showAuthPopup = ref(false);

// 현재 페이지 URL을 returnUrl로 사용
const currentRoute = computed(() => route.fullPath);

const handleProtectedAction = () => {
    if (!loggedIn.value) {
        showAuthPopup.value = true;
        return;
    }
    
    // 실제 기능 실행
    addToFavorites();
};

const handleLogin = () => {
    // 로그인 성공 후 자동으로 팝업이 닫히고 returnUrl로 이동
    console.log('로그인 프로세스 시작');
};
</script>
```

#### 특징
- **자동 상태 감지**: 로그인 성공 시 자동으로 팝업 닫기
- **자동 리다이렉트**: returnUrl 제공 시 로그인 후 해당 페이지로 자동 이동
- **키보드 지원**: ESC 키로 팝업 닫기
- **백드롭 클릭**: 배경 클릭으로 팝업 닫기
- **스크롤 방지**: 팝업 표시 중 배경 스크롤 차단
- **접근성**: 적절한 ARIA 속성과 포커스 관리
- **애니메이션**: 부드러운 fade + scale 트랜지션

## 🏷️ 태그 시스템

### 태그 개념
Plero의 태그 시스템은 페이지 분류 기능으로, 두 가지 타입을 지원합니다:

1. **사용자 태그**: 일반 태그명 (예: `frontend`, `tutorial`)
   - 사용자가 생성한 페이지끼리만 분류
   - 개인 또는 팀 단위의 콘텐츠 관리용

2. **시스템 태그**: `plero:` 접두사 태그 (예: `plero:official`, `plero:guide`)
   - Plero 서비스 전체에 대해 페이지 분류
   - 공식 문서, 가이드 등 전역 콘텐츠용

### Editor.vue 태그 UI 구현
```vue
<template>
    <div class="space-y-3">
        <label class="text-sm font-medium text-[var(--ui-text)]">태그</label>
        
        <!-- 기존 태그들 -->
        <div v-if="tags.length > 0" class="flex flex-wrap gap-2">
            <div 
                v-for="tag in tags" 
                :key="tag" 
                :class="[
                    'rounded-full px-3 py-1 text-sm flex items-center gap-2 transition-colors',
                    isPleroTag(tag) 
                        ? 'bg-[var(--ui-primary)] text-[var(--ui-text-inverted)]' 
                        : 'bg-[var(--ui-bg-elevated)] text-[var(--ui-text)] border border-[var(--ui-border)]'
                ]"
            >
                <span v-if="isPleroTag(tag)" class="text-xs opacity-80">🏷️</span>
                <span v-else class="text-xs opacity-80">🔖</span>
                {{ tag }}
                <button @click="removeTag(tag)">
                    <Icon name="mdi:close" class="w-3 h-3" />
                </button>
            </div>
        </div>

        <!-- 새 태그 입력 -->
        <div class="flex gap-2">
            <input 
                v-model="newTag"
                type="text" 
                placeholder="태그를 입력하고 Enter를 누르세요 (예: frontend, plero:official)"
                @keydown="handleTagInput"
                class="flex-1 text-[var(--ui-text)] bg-[var(--ui-bg)] border border-[var(--ui-border)] rounded-md px-3 py-2 text-sm outline-none focus:border-[var(--ui-primary)] transition-colors" 
            />
            <button 
                @click="addTag"
                :disabled="!newTag.trim()"
                class="px-4 py-2 bg-[var(--ui-primary)] text-[var(--ui-text-inverted)] rounded-md text-sm font-medium disabled:opacity-50 disabled:cursor-not-allowed hover:bg-[var(--ui-primary-elevated)] transition-colors"
            >
                추가
            </button>
        </div>

        <!-- 태그 설명 -->
        <div class="text-xs text-[var(--ui-text-muted)] space-y-1">
            <p>• 일반 태그: 사용자 페이지끼리 분류됩니다 (예: frontend, tutorial)</p>
            <p>• plero: 태그: 전체 서비스에서 분류됩니다 (예: plero:official, plero:guide)</p>
        </div>
    </div>
</template>

<script setup>
const newTag = ref('')

const addTag = () => {
    const trimmedTag = newTag.value.trim()
    if (trimmedTag && !props.tags.includes(trimmedTag)) {
        emit('update:tags', [...props.tags, trimmedTag])
        newTag.value = ''
    }
}

const handleTagInput = (event) => {
    if (event.key === 'Enter') {
        event.preventDefault()
        addTag()
    }
}

const isPleroTag = (tag) => {
    return tag.startsWith('plero:')
}
</script>
```

### 태그 시각적 구분
- **사용자 태그**: 
  - 배경: `var(--ui-bg-elevated)` (연한 회색)
  - 테두리: `var(--ui-border)`
  - 아이콘: 🔖 (북마크)

- **시스템 태그 (plero:)**:
  - 배경: `var(--ui-primary)` (인디고)
  - 텍스트: `var(--ui-text-inverted)` (흰색)
  - 아이콘: 🏷️ (태그)

### 태그 기능
- **Enter 키 입력**: 새 태그 즉시 추가
- **중복 방지**: 동일한 태그 재추가 차단
- **개별 삭제**: 각 태그별 X 버튼으로 제거
- **실시간 미리보기**: 입력과 동시에 태그 유형 구분
- **설명 텍스트**: 사용자에게 태그 유형별 용도 안내

### HistoryCard 컴포넌트
위키 변경 기록 항목을 표시하는 재사용 가능한 카드 컴포넌트입니다.

#### Props
```typescript
import type { WikiHistory } from '~/server/db/schema';

interface Props {
    history: WikiHistory;       // 변경 기록 데이터 (schema.ts의 WikiHistory 타입)
    wikiId: string | string[];  // 위키 ID
}
```

#### Events
```typescript
interface Emits {
    (e: 'view-version', historyId: string): void;     // 버전 보기
    (e: 'view-diff', historyId: string): void;        // 차이점 보기
    (e: 'revert', history: WikiHistory): void;        // 되돌리기
}
```

#### 사용 예시
```vue
<template>
    <div class="divide-y divide-[var(--ui-border)]">
        <HistoryCard
            v-for="history in historyList" 
            :key="history.id"
            :history="history"
            :wiki-id="wikiId"
            @view-version="navigateToVersion"
            @view-diff="navigateToVersionDiff"
            @revert="showRevertModal"
        />
    </div>
</template>
```

#### 주요 기능
- **변경 유형별 스타일링**: 생성, 편집, 되돌리기 등 각각 다른 색상과 아이콘
- **태그 변경 표시**: addedTags(초록색)와 removedTags(빨간색) 구분 표시
- **변경량 시각화**: 추가/삭제된 문자 수 색상 코딩
- **액션 버튼**: 버전 보기, 차이점 보기, 되돌리기 기능
- **반응형 레이아웃**: 모바일/데스크톱 대응
- **접근성**: 적절한 title 속성과 키보드 지원

#### 태그 변경 사항 표시
```vue
<!-- 추가된 태그 -->
<div v-if="history.addedTags && history.addedTags.length > 0" class="flex items-center gap-2 flex-wrap">
    <div class="flex items-center gap-1">
        <Icon icon="material-symbols:add-circle-outline" width="14" height="14" class="text-green-600 dark:text-green-400" />
        <span class="text-xs text-green-600 dark:text-green-400 font-medium">추가된 태그:</span>
    </div>
    <div class="flex gap-1 flex-wrap">
        <span 
            v-for="tag in history.addedTags.slice(0, 3)" 
            :key="tag"
            class="inline-flex items-center px-2 py-1 text-xs bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-400 rounded border border-green-200 dark:border-green-800"
        >
            {{ tag }}
        </span>
    </div>
</div>

<!-- 제거된 태그 -->
<div v-if="history.removedTags && history.removedTags.length > 0" class="flex items-center gap-2 flex-wrap">
    <div class="flex items-center gap-1">
        <Icon icon="material-symbols:remove-circle-outline" width="14" height="14" class="text-red-600 dark:text-red-400" />
        <span class="text-xs text-red-600 dark:text-red-400 font-medium">제거된 태그:</span>
    </div>
    <div class="flex gap-1 flex-wrap">
        <span 
            v-for="tag in history.removedTags.slice(0, 3)" 
            :key="tag"
            class="inline-flex items-center px-2 py-1 text-xs bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-400 rounded border border-red-200 dark:border-red-800 line-through"
        >
            {{ tag }}
        </span>
    </div>
</div>
```

#### 특징
- **분리된 관심사**: 히스토리 페이지에서 카드 로직을 분리하여 재사용성 향상
- **태그 차이 표시**: 기존 tags 필드 대신 addedTags/removedTags로 더 명확한 변경 사항 표시
- **일관된 디자인**: 프로젝트 디자인 시스템을 따르는 색상과 스타일링
- **호버 효과**: 버튼 스케일링과 배경 변화로 인터랙션 개선

## ✅ 체크리스트

새로운 컴포넌트나 페이지를 만들 때 확인사항:

- [ ] CSS 변수 사용 (`var(--ui-*)`)
- [ ] Iconify 아이콘 사용 (`@iconify/vue`)
- [ ] 표준 레이아웃 패턴 적용
- [ ] 반응형 디자인 고려
- [ ] 다크 모드 지원
- [ ] 적절한 트랜지션 효과
- [ ] 일관된 간격 및 패딩
- [ ] 접근성 고려 (키보드 네비게이션, 스크린 리더 등)
- [ ] 컴포넌트 분리 및 재사용성 고려

# 룰
이 페이지는 최근 변경 사항 및 업데이트 내역을 작성하는 페이지가 **아닙니다**.

description:
globs:
alwaysApply: true
---
