# Plero 프로젝트 디자인 시스템

## 📋 최근 완료된 기능들

### 🧩 컴포넌트 분리 및 코드 구조 개선 (2024-12-26)
- **FavoriteListItem 컴포넌트 분리**: `StarButton.vue`에서 목록 아이템 로직을 별도 컴포넌트로 분리
  - Props: `list`, `index`, `isChecked`, `isEditing`, `editingName`, `loading`
  - Events: `toggle`, `context-menu`, `start-editing`, `finish-editing`, `cancel-editing`, `update-editing-name`
  - 편집 모드와 일반 모드 상태 관리 개선
  - 키보드 이벤트 처리 (Enter/Escape) 통합
- **StarButton 컴포넌트 리팩토링**: 복잡한 목록 아이템 로직 제거로 가독성 향상
  - `finishEditingList` 함수 파라미터 지원 추가
  - 이벤트 핸들링 단순화

### 🚀 API 분리 및 Hydration 최적화 (2024-12-26)
- **즐겨찾기 API 분리**: 서버/클라이언트 데이터 로딩 최적화
  - `GET /api/wiki/[id]/stars` - 위키 스타 수만 반환 (서버사이드)
  - `GET /api/favorites/user/wiki/[wikiId]` - 사용자 즐겨찾기 데이터 (클라이언트사이드)
  - 기존 `/api/favorites/wiki/[wikiId]` 제거
- **StarButton 컴포넌트 개선**: 
  - `initialStarCount` props 추가로 서버사이드 데이터 전달
  - 드롭다운 열 때만 사용자 데이터 로드 (지연 로딩)
  - Hydration 오류 해결
- **성능 최적화**: 병렬 데이터 로딩으로 초기 로딩 속도 개선

### ⭐ 즐겨찾기 시스템 구현 완료 (2024-12-26)
- **스키마 설계**: `FAVORITES_LIST_SCHEMA`, `FAVORITES_ITEM_SCHEMA` 추가
- **데이터베이스 CRUD**: 즐겨찾기 목록 및 아이템 관리 함수들 구현
  - `favoritesList.ts`: 목록 생성, 수정, 삭제, 조회, 정렬 기능
  - `favoritesItem.ts`: 위키 즐겨찾기 추가/제거, 조회, 통계 기능
- **보안 강화된 API 엔드포인트**: `requireUserSessionForTest`를 통한 서버사이드 인증
  - `GET /api/favorites/lists` - 인증된 사용자의 즐겨찾기 목록 조회
  - `POST /api/favorites/lists` - 새 즐겨찾기 목록 생성
  - `PATCH /api/favorites/lists/[id]` - 즐겨찾기 목록 수정
  - `DELETE /api/favorites/lists/[id]` - 즐겨찾기 목록 삭제
  - `POST /api/favorites/items` - 위키를 즐겨찾기에 추가
  - `DELETE /api/favorites/items` - 위키를 즐겨찾기에서 제거
  - `GET /api/favorites/wiki/[wikiId]` - 위키 즐겨찾기 정보 조회
- **컴포넌트 연동**: `StarButton.vue` 실제 API와 연동 (클라이언트 사이드 userId 제거)
  - 실시간 즐겨찾기 상태 표시 및 수정
  - 다중 즐겨찾기 목록 지원
  - 새 목록 생성 기능
  - 기본 목록 자동 생성
  - 서버사이드 인증을 통한 보안 강화
- **테스트 완료**: vitest를 통한 DB단 기능 테스트 (19개 테스트 모두 통과)

### 🎨 LoginProfileBadge UI 개선 (2024-12-26)
- **현대적인 프로필 메뉴 디자인**: 기존 단순한 드롭다운을 현대적인 카드 스타일로 개선
  - 부드러운 애니메이션 트랜지션 (fade + scale + translate 효과)
  - 넓은 메뉴 폭 (320px)으로 더 나은 가독성 제공
  - 라운드 모서리와 그림자 효과로 시각적 깊이감 추가
- **향상된 사용자 정보 표시**: 
  - 사용자 프로필 헤더 섹션 추가 (아바타 + 이름 + 이메일)
  - 온라인 상태 표시 인디케이터 (초록색 점)
  - 프로필 사진이 없는 경우 그라데이션 배경의 기본 아이콘 표시
- **개선된 메뉴 아이템들**:
  - 아이콘 배경이 있는 카드형 버튼 스타일
  - 각 메뉴별 설명 텍스트 추가
  - 호버 시 아이콘 배경 색상 변경 및 화살표 애니메이션
  - 위험한 액션(로그아웃)에 대한 시각적 구분 (빨간색 테마)
- **새로운 메뉴 기능들**:
  - "프로필 보기" 메뉴 추가
  - "즐겨찾기" 메뉴 추가  
  - 다크모드 토글 시 아이콘 동적 변경 (light-mode ↔ dark-mode)
- **로그인 유도 개선**: 
  - 중앙 정렬된 카드 디자인
  - 대형 아이콘과 명확한 메시지
  - 그라데이션 로그인 버튼으로 CTA 강화
- **프로젝트 디자인 시스템 준수**: CSS 변수 기반 색상 팔레트 완전 적용

### 🔐 AuthorizePopup 컴포넌트 구현 (2024-12-26)
- **로그인 유도 팝업**: 로그인이 필요한 기능에 접근할 때 표시되는 모달 UI 구현
  - 현대적인 모달 디자인 (backdrop blur, 부드러운 애니메이션)
  - Props: `visible`, `title`, `message`, `requiredFeature`, `returnUrl`
  - Events: `close`, `login`
  - 자동 로그인 상태 감지 및 팝업 닫기
  - ESC 키 및 백드롭 클릭으로 닫기 기능
  - 스크롤 방지 (팝업 열 때 body overflow hidden)
- **사용자 경험 개선**:
  - 잠금 아이콘과 그라데이션 배경으로 시각적 강조
  - 로그인 혜택 안내 (즐겨찾기, 편집, 개인화 기능)
  - Google 로그인 버튼 (기존 인증 시스템 연동)
  - "나중에 하기" 옵션으로 사용자 선택권 제공
- **접근성 및 UX**:
  - 키보드 네비게이션 지원 (ESC 키)
  - 반응형 디자인 (모바일 최적화)
  - 다크모드 완전 지원
  - Teleport를 통한 body 레벨 렌더링

### ✅ 이전 완료 기능들
- **위키 목록 페이지 개발**: 검색, 필터링, 페이지네이션 기능
- **통합 검색 기능**: 실시간 검색 및 결과 하이라이팅
- **페이지네이션 시스템**: 효율적인 대용량 데이터 처리
- **홈페이지 기능**: "다른 위키 보러가기" 버튼으로 위키 목록 연결

## 🎯 현재 개발 할일

### 🔨 진행 중
- **프론트엔드 런타임 테스팅**: 실제 브라우저에서 즐겨찾기 기능 검증

### 📋 대기 중
- **사용자 인증 시스템**: 실제 사용자 ID를 통한 즐겨찾기 기능 완성
- **즐겨찾기 페이지**: 사용자의 즐겨찾기 목록을 보여주는 전용 페이지
- **알림 시스템**: 즐겨찾기한 위키 업데이트 알림
- **검색 개선**: 즐겨찾기 상태를 포함한 고급 검색 필터
- **성능 최적화**: 즐겨찾기 관련 API 캐싱 및 최적화

## 🎨 색상 팔레트

### CSS 변수 사용 (assets/css/main.css 기준)
```css
/* 텍스트 색상 */
--ui-text-dimmed: var(--color-neutral-400);     /* 희미한 텍스트 */
--ui-text-muted: var(--color-neutral-500);      /* 보조 텍스트 */
--ui-text-toned: var(--color-neutral-600);      /* 톤 다운된 텍스트 */
--ui-text: var(--color-neutral-700);            /* 기본 텍스트 */
--ui-text-highlighted: var(--color-neutral-900); /* 강조 텍스트 */
--ui-text-inverted: var(--color-white);         /* 반전 텍스트 */

/* 배경 색상 */
--ui-bg: var(--color-white);                    /* 기본 배경 */
--ui-bg-muted: var(--color-neutral-50);         /* 보조 배경 */
--ui-bg-elevated: var(--color-neutral-100);     /* 부각된 배경 */
--ui-bg-accented: var(--color-neutral-200);     /* 강조된 배경 */
--ui-bg-inverted: var(--color-neutral-900);     /* 반전 배경 */

/* 테두리 색상 */
--ui-border: var(--color-neutral-200);          /* 기본 테두리 */
--ui-border-muted: var(--color-neutral-200);    /* 보조 테두리 */
--ui-border-accented: var(--color-neutral-300); /* 강조된 테두리 */
--ui-border-inverted: var(--color-neutral-900); /* 반전 테두리 */

/* 프라이머리 색상 */
--ui-primary: var(--color-indigo-400);          /* 기본 프라이머리 */
--ui-primary-muted: var(--color-indigo-500);    /* 보조 프라이머리 */
--ui-primary-elevated: var(--color-indigo-600); /* 부각된 프라이머리 */
--ui-primary-accented: var(--color-indigo-700); /* 강조된 프라이머리 */
--ui-primary-inverted: var(--color-indigo-800); /* 반전 프라이머리 */
```

### 사용 방법
```css
/* 올바른 방법 */
color: var(--ui-text);
background: var(--ui-bg-muted);

/* 피해야 할 방법 */
color: #374151;
background: #f9fafb;
```

## 🏗️ 레이아웃 패턴

### 1. 페이지 기본 구조
```vue
<template>
    <div class="min-h-screen bg-[var(--ui-bg)]">
        <!-- 상단 헤더 (고정) -->
        <div class="sticky top-0 z-10 bg-[var(--ui-bg)] border-b-[1px] border-[var(--ui-border)] shadow-sm">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <!-- 헤더 내용 -->
            </div>
        </div>

        <!-- 메인 컨텐츠 -->
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <!-- 콘텐츠 -->
        </div>
    </div>
</template>
```

### 2. 헤더 패턴
```vue
<div class="flex justify-between items-center py-4 flex-wrap gap-4">
    <!-- 왼쪽: 브레드크럼/네비게이션 -->
    <div class="flex items-center gap-2 text-sm">
        <button class="flex items-center gap-2 text-[var(--ui-text-muted)] hover:text-[var(--ui-text)] transition-colors duration-200 group">
            <Icon icon="material-symbols:arrow-back" width="20" height="20" class="group-hover:scale-110 transition-transform duration-200" />
            <span class="font-medium">뒤로가기</span>
        </button>
        <div class="ml-2 h-6 w-px bg-[var(--ui-border)]"></div>
        <h1 class="ml-2 text-lg font-semibold text-[var(--ui-text)]">페이지 제목</h1>
    </div>
    
    <!-- 오른쪽: 액션 버튼들 -->
    <div class="flex items-center gap-3">
        <!-- 버튼들 -->
    </div>
</div>
```

### 3. 카드 컴포넌트
```vue
<div class="bg-[var(--ui-bg)] border border-[var(--ui-border)] rounded-xl shadow-sm overflow-hidden">
    <!-- 카드 헤더 (선택사항) -->
    <div class="px-6 py-4 border-b border-[var(--ui-border)] bg-[var(--ui-bg-muted)]">
        <h2 class="text-lg font-semibold text-[var(--ui-text-highlighted)]">카드 제목</h2>
    </div>
    
    <!-- 카드 내용 -->
    <div class="p-6">
        <!-- 콘텐츠 -->
    </div>
</div>
```

## 🔘 버튼 패턴

### 1. 프라이머리 버튼 (강조 액션)
```vue
<button class="flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-[var(--ui-primary)] to-[var(--ui-primary-muted)] text-white rounded-lg hover:from-[var(--ui-primary-muted)] hover:to-[var(--ui-primary-elevated)] transition-all duration-200 shadow-md hover:shadow-lg">
    <Icon icon="material-symbols:save" width="16" height="16" />
    <span class="text-sm font-medium">저장</span>
</button>
```

### 2. 세컨더리 버튼 (보조 액션)
```vue
<button class="flex items-center gap-2 px-3 py-2 text-[var(--ui-text-muted)] hover:text-[var(--ui-text)] border border-[var(--ui-border)] rounded-lg hover:bg-[var(--ui-bg-muted)] transition-all duration-200">
    <Icon icon="material-symbols:edit" width="16" height="16" />
    <span class="text-sm font-medium">편집</span>
</button>
```

### 3. 위험 액션 버튼
```vue
<button class="flex items-center gap-2 px-3 py-2 text-[var(--ui-text-muted)] hover:text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-all duration-200">
    <Icon icon="material-symbols:delete-outline" width="16" height="16" />
    <span class="text-sm font-medium">삭제</span>
</button>
```

## 🎯 아이콘 사용법

### Iconify 사용
```vue
<script setup>
import { Icon } from '@iconify/vue';
</script>

<template>
    <!-- 기본 사용법 -->
    <Icon icon="material-symbols:home-outline" width="20" height="20" />
    
    <!-- 호버 효과와 함께 -->
    <Icon icon="material-symbols:arrow-back" width="20" height="20" class="group-hover:scale-110 transition-transform duration-200" />
</template>
```

### 자주 사용하는 아이콘들
- `material-symbols:arrow-back` - 뒤로가기
- `material-symbols:edit` - 편집
- `material-symbols:save` - 저장
- `material-symbols:delete-outline` - 삭제
- `material-symbols:history` - 변경 기록
- `material-symbols:visibility` - 보기
- `material-symbols:home-outline` - 홈
- `material-symbols:add-circle-outline` - 추가
- `material-symbols:check-circle-outline` - 완료/확인

## 🌙 다크 모드 지원

### CSS 변수 자동 변환
다크 모드는 CSS 변수를 통해 자동으로 처리됩니다. `.dark` 클래스가 적용되면 색상이 자동으로 변경됩니다.

### 특별한 처리가 필요한 경우
```vue
<style scoped>
.my-element {
    @apply bg-green-50 text-green-700;
}

/* 다크 모드 전용 스타일 */
.dark .my-element {
    @apply bg-green-900/20 text-green-300;
}
</style>
```

## 📱 반응형 디자인

### 브레이크포인트 (Tailwind CSS 기준)
- `sm:` - 640px 이상
- `md:` - 768px 이상
- `lg:` - 1024px 이상
- `xl:` - 1280px 이상

### 반응형 패턴 예시
```vue
<div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
    <!-- 모바일: 1열, 데스크톱: 4열 -->
</div>

<div class="flex-col items-start gap-4 lg:flex-row lg:items-center">
    <!-- 모바일: 세로 배치, 데스크톱: 가로 배치 -->
</div>
```

## ✨ 애니메이션 및 트랜지션

### 표준 트랜지션
```css
transition-colors duration-200   /* 색상 변화 */
transition-all duration-200      /* 모든 속성 변화 */
transition-transform duration-200 /* 변형 효과 */
```

### 호버 효과
```vue
<!-- 스케일 효과 -->
<div class="group-hover:scale-110 transition-transform duration-200">

<!-- 이동 효과 -->
<div class="group-hover:translate-x-1 transition-transform duration-200">

<!-- 색상 변화 -->
<div class="hover:text-[var(--ui-text)] transition-colors duration-200">
```

## 🔤 타이포그래피

### 제목 크기
```vue
<h1 class="text-3xl font-bold text-[var(--ui-text-highlighted)]">    <!-- 메인 제목 -->
<h2 class="text-2xl font-bold text-[var(--ui-text-highlighted)]">    <!-- 섹션 제목 -->
<h3 class="text-lg font-semibold text-[var(--ui-text)]">             <!-- 서브 제목 -->
<h4 class="text-sm font-semibold text-[var(--ui-text)]">             <!-- 작은 제목 -->
```

### 본문 텍스트
```vue
<p class="text-[var(--ui-text)]">                    <!-- 기본 텍스트 -->
<span class="text-[var(--ui-text-muted)]">           <!-- 보조 텍스트 -->
<small class="text-xs text-[var(--ui-text-muted)]">  <!-- 작은 텍스트 -->
```

## 🗂️ 코드 및 diff 스타일

### 모노스페이스 폰트
```vue
<div class="font-mono text-sm">
    <!-- 코드 내용 -->
</div>
```

### Diff 색상
```vue
<!-- 추가된 내용 -->
<span class="bg-green-50 text-green-700 dark:bg-green-900/20 dark:text-green-300 px-1 rounded">

<!-- 제거된 내용 -->
<span class="bg-red-50 text-red-700 dark:bg-red-900/20 dark:text-red-300 px-1 rounded line-through">
```

## 📏 간격 및 패딩

### 표준 간격
- `gap-2` (8px) - 작은 요소 간격
- `gap-3` (12px) - 버튼 그룹 간격  
- `gap-4` (16px) - 일반적인 간격
- `gap-6` (24px) - 섹션 간격

### 패딩
- `p-4` (16px) - 작은 카드 패딩
- `p-6` (24px) - 일반적인 카드 패딩
- `px-4 py-2` - 버튼 패딩
- `px-6 py-4` - 카드 헤더 패딩

## 🎛️ 상태 표시

### 로딩 상태
```vue
<Icon v-if="loading" icon="line-md:loading-loop" width="18" height="18" />
```

### 빈 상태
```vue
<div class="text-center py-12">
    <Icon icon="material-symbols:check-circle-outline" width="48" height="48" class="mx-auto text-[var(--ui-text-muted)] mb-4" />
    <h3 class="text-lg font-medium text-[var(--ui-text)] mb-2">데이터 없음</h3>
    <p class="text-[var(--ui-text-muted)]">표시할 내용이 없습니다.</p>
</div>
```

## 🧩 위키 전용 컴포넌트

### FavoriteListItem 컴포넌트
즐겨찾기 목록 아이템을 담당하는 재사용 가능한 컴포넌트입니다.

#### Props
```typescript
interface Props {
    list: FavoritesList;        // 즐겨찾기 목록 데이터
    index: number;              // 목록 인덱스 (체크박스 ID용)
    isChecked: boolean;         // 체크 상태
    isEditing: boolean;         // 편집 모드 여부
    editingName: string;        // 편집 중인 이름
    loading: boolean;           // 로딩 상태
}
```

#### Events
```typescript
interface Emits {
    (e: 'toggle', list: FavoritesList): void;                    // 체크박스 토글
    (e: 'context-menu', event: MouseEvent, list: FavoritesList): void; // 우클릭 컨텍스트 메뉴
    (e: 'start-editing'): void;                                  // 편집 시작
    (e: 'finish-editing', name: string): void;                   // 편집 완료
    (e: 'cancel-editing'): void;                                 // 편집 취소
    (e: 'update-editing-name', name: string): void;              // 편집 중 이름 업데이트
}
```

#### 사용 예시
```vue
<FavoriteListItem 
    :list="list"
    :index="index"
    :is-checked="favoritedListIds.includes(list.id)"
    :is-editing="editingListId === list.id"
    :editing-name="editingListName"
    :loading="loading"
    @toggle="toggleListFavorite"
    @context-menu="showContextMenuHandler"
    @start-editing="startEditingList"
    @finish-editing="finishEditingList"
    @cancel-editing="cancelEditingList"
    @update-editing-name="editingListName = $event" />
```

#### 특징
- **이중 모드 지원**: 일반 표시 모드와 편집 모드 간 전환
- **키보드 지원**: Enter(저장), Escape(취소) 키 지원
- **컨텍스트 메뉴**: 우클릭으로 편집/삭제 메뉴 표시
- **접근성**: 적절한 label과 체크박스 연결
- **상태 표시**: 기본 목록 배지, 즐겨찾기 상태 아이콘

### StarButton 컴포넌트
위키 즐겨찾기 기능을 제공하는 복합 버튼 컴포넌트입니다.

#### Props
```typescript
interface Props {
    wikiId: string;             // 위키 ID
    initialStarCount?: number;  // 초기 스타 수 (서버사이드 렌더링용)
}
```

#### 주요 기능
- **분할 버튼**: 메인 즐겨찾기 버튼 + 드롭다운 토글
- **지연 로딩**: 드롭다운 열 때만 사용자 데이터 로드
- **다중 목록 지원**: 여러 즐겨찾기 목록에 추가/제거 가능
- **목록 관리**: 새 목록 생성, 이름 수정, 목록 삭제
- **실시간 업데이트**: 즐겨찾기 상태 실시간 반영

### AuthorizePopup 컴포넌트
로그인이 필요한 기능에 접근할 때 표시되는 모달 팝업 컴포넌트입니다.

#### Props
```typescript
interface Props {
    visible?: boolean;          // 팝업 표시 여부
    title?: string;             // 팝업 제목 (기본: "로그인이 필요합니다")
    message?: string;           // 팝업 메시지 (기본: "이 기능을 사용하려면 로그인이 필요합니다.")
    requiredFeature?: string;   // 필요한 기능명 (배지로 표시)
    returnUrl?: string;         // 로그인 후 돌아갈 URL
}
```

#### Events
```typescript
interface Emits {
    (e: 'close'): void;         // 팝업 닫기
    (e: 'login'): void;         // 로그인 버튼 클릭
}
```

#### 사용 예시
```vue
<template>
    <div>
        <!-- 로그인이 필요한 기능 버튼 -->
        <button @click="handleProtectedAction" class="...">
            즐겨찾기 추가
        </button>

        <!-- 인증 팝업 -->
        <AuthorizePopup 
            :visible="showAuthPopup"
            title="즐겨찾기 기능 이용하기"
            message="즐겨찾기를 사용하려면 로그인이 필요합니다."
            required-feature="즐겨찾기"
            :return-url="currentRoute"
            @close="showAuthPopup = false"
            @login="handleLogin" />
    </div>
</template>

<script setup>
const { loggedIn } = useUserSession();
const route = useRoute();
const showAuthPopup = ref(false);

// 현재 페이지 URL을 returnUrl로 사용
const currentRoute = computed(() => route.fullPath);

const handleProtectedAction = () => {
    if (!loggedIn.value) {
        showAuthPopup.value = true;
        return;
    }
    
    // 실제 기능 실행
    addToFavorites();
};

const handleLogin = () => {
    // 로그인 성공 후 자동으로 팝업이 닫히고 returnUrl로 이동
    console.log('로그인 프로세스 시작');
};
</script>
```

#### 특징
- **자동 상태 감지**: 로그인 성공 시 자동으로 팝업 닫기
- **자동 리다이렉트**: returnUrl 제공 시 로그인 후 해당 페이지로 자동 이동
- **키보드 지원**: ESC 키로 팝업 닫기
- **백드롭 클릭**: 배경 클릭으로 팝업 닫기
- **스크롤 방지**: 팝업 표시 중 배경 스크롤 차단
- **접근성**: 적절한 ARIA 속성과 포커스 관리
- **애니메이션**: 부드러운 fade + scale 트랜지션

## ✅ 체크리스트

새로운 컴포넌트나 페이지를 만들 때 확인사항:

- [ ] CSS 변수 사용 (`var(--ui-*)`)
- [ ] Iconify 아이콘 사용 (`@iconify/vue`)
- [ ] 표준 레이아웃 패턴 적용
- [ ] 반응형 디자인 고려
- [ ] 다크 모드 지원
- [ ] 적절한 트랜지션 효과
- [ ] 일관된 간격 및 패딩
- [ ] 접근성 고려 (키보드 네비게이션, 스크린 리더 등)
- [ ] 컴포넌트 분리 및 재사용성 고려
description:
globs:
alwaysApply: true
---
