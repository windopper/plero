# Plero 프로젝트 디자인 시스템

## 🎨 색상 팔레트

### CSS 변수 사용 (assets/css/main.css 기준)
```css
/* 텍스트 색상 */
--ui-text-dimmed: var(--color-neutral-400);     /* 희미한 텍스트 */
--ui-text-muted: var(--color-neutral-500);      /* 보조 텍스트 */
--ui-text: var(--color-neutral-700);            /* 기본 텍스트 */
--ui-text-highlighted: var(--color-neutral-900); /* 강조 텍스트 */
--ui-text-inverted: var(--color-white);         /* 반전 텍스트 */

/* 배경 색상 */
--ui-bg: var(--color-white);                    /* 기본 배경 */
--ui-bg-muted: var(--color-neutral-50);         /* 보조 배경 */
--ui-bg-elevated: var(--color-neutral-100);     /* 부각된 배경 */
--ui-bg-inverted: var(--color-neutral-900);     /* 반전 배경 */

/* 테두리 색상 */
--ui-border: var(--color-neutral-200);          /* 기본 테두리 */
--ui-border-accented: var(--color-neutral-300); /* 강조된 테두리 */

/* 프라이머리 색상 */
--ui-primary: var(--color-indigo-400);          /* 기본 프라이머리 */
--ui-primary-muted: var(--color-indigo-500);    /* 보조 프라이머리 */
--ui-primary-elevated: var(--color-indigo-600); /* 부각된 프라이머리 */
```

## 🏗️ 레이아웃 패턴

### 페이지 기본 구조
```vue
<template>
    <div class="min-h-screen bg-[var(--ui-bg)]">
        <!-- 상단 헤더 -->
        <div class="sticky top-0 z-10 bg-[var(--ui-bg)] border-b border-[var(--ui-border)] shadow-sm">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <!-- 헤더 내용 -->
            </div>
        </div>
        
        <!-- 메인 컨텐츠 -->
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <!-- 콘텐츠 -->
        </div>
    </div>
</template>
```

### 카드 컴포넌트
```vue
<div class="bg-[var(--ui-bg)] border border-[var(--ui-border)] rounded-xl shadow-sm">
    <div class="p-6">
        <!-- 콘텐츠 -->
    </div>
</div>
```

## 🔘 버튼 패턴

```vue
<!-- 프라이머리 버튼 -->
<button class="flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-[var(--ui-primary)] to-[var(--ui-primary-muted)] text-white rounded-lg hover:from-[var(--ui-primary-muted)] hover:to-[var(--ui-primary-elevated)] transition-all duration-200">
    <Icon icon="material-symbols:save" width="16" height="16" />
    <span class="text-sm font-medium">저장</span>
</button>

<!-- 세컨더리 버튼 -->
<button class="flex items-center gap-2 px-3 py-2 text-[var(--ui-text-muted)] hover:text-[var(--ui-text)] border border-[var(--ui-border)] rounded-lg hover:bg-[var(--ui-bg-muted)] transition-all duration-200">
    <Icon icon="material-symbols:edit" width="16" height="16" />
    <span class="text-sm font-medium">편집</span>
</button>
```

## 🎯 아이콘 사용법

### Iconify 기본 사용
```vue
<script setup>
import { Icon } from '@iconify/vue';
</script>

<template>
    <Icon icon="material-symbols:home-outline" width="20" height="20" />
</template>
```

### 자주 사용하는 아이콘
- `material-symbols:arrow-back` - 뒤로가기
- `material-symbols:edit` - 편집
- `material-symbols:save` - 저장
- `material-symbols:delete-outline` - 삭제
- `material-symbols:history` - 변경 기록

## 📱 반응형 & 애니메이션

### 브레이크포인트
- `sm:` (640px+), `md:` (768px+), `lg:` (1024px+), `xl:` (1280px+)

### 표준 트랜지션
```css
transition-colors duration-200   /* 색상 변화 */
transition-all duration-200      /* 모든 속성 변화 */
```

## 🧩 주요 컴포넌트

### StarButton (즐겨찾기)
```typescript
interface Props {
    wikiId: string;
    initialStarCount?: number;
}
```
- 분할 버튼: 메인 즐겨찾기 + 드롭다운
- 다중 목록 지원, 새 목록 생성
- 실시간 상태 업데이트

### WikiPublishButton (공개/비공개)
```typescript
interface Props {
    isPublished: boolean;
    wikiId: string;
    wikiTitle: string;
}
```
- 제목 중복 검사, 모달 인터페이스
- 상태별 버튼 표시

### AuthorizePopup (로그인 요구)
```typescript
interface Props {
    visible?: boolean;
    title?: string;
    message?: string;
    requiredFeature?: string;
    returnUrl?: string;
}
```

### AdminPanel (관리자 전용)
- 위치: 우측 상단 빨간 왕관 아이콘
- 단축키: `Ctrl+Shift+A`
- 기능: 위키 영구 삭제

## 🤖 AI 시스템

### AI 위키 생성
```typescript
// 일반 생성
const response = await $fetch('/api/ai/wiki', {
    method: 'POST',
    body: { instruction }
});

// 스트림 생성 (중단 가능)
const response = await fetch('/api/ai/wiki', {
    method: 'POST',
    body: JSON.stringify({ instruction, stream: true }),
    signal: abortController.signal
});
```

### 멀티모달 지원
- **지원 형식**: 이미지(JPG, PNG, GIF, WebP, SVG), 문서(PDF, DOCX, TXT, MD, CSV, XLSX)
- **크기 제한**: 10MB per 파일
- **기능**: 드래그&드롭, 파일 미리보기, 자동 정리(24시간)

### AI 편집 툴팁
- **기본 기능**: 개선, 요약, 확장, 번역
- **멀티모달**: "지정" 모드에서 파일 첨부 가능
- **프로세스**: 텍스트 선택 → 툴팁 → 파일 첨부 → AI 편집 → 결과 적용

## 📊 상태 관리

### 로딩 상태
```vue
<Icon v-if="loading" icon="line-md:loading-loop" width="18" height="18" />
```

### 빈 상태
```vue
<div class="text-center py-12">
    <Icon icon="material-symbols:check-circle-outline" width="48" height="48" class="mx-auto text-[var(--ui-text-muted)] mb-4" />
    <h3 class="text-lg font-medium text-[var(--ui-text)] mb-2">데이터 없음</h3>
    <p class="text-[var(--ui-text-muted)]">표시할 내용이 없습니다.</p>
</div>
```

## 📈 최근 완료 기능

### 즐겨찾기 시스템 (2024-12-26)
- 다중 목록 지원, 실시간 상태 업데이트
- 새 목록 생성, 19개 vitest 통과

### 태그 시스템 UI (2024-12-26)
- 사용자/시스템 태그 구분, Enter 키 입력
- 시각적 구분, 중복 방지, 개별 삭제

### 페이지네이션 최적화 (2024-12-27)
- 스크롤 위치 유지, 페이지 리로드 없는 더보기
- 위키 목록, 히스토리 페이지 적용

### AI 멀티모달 지원 (2024-12-26)
- 위키 생성: 이미지, PDF, 문서 분석
- 편집 툴팁: 파일 첨부 기반 정확한 편집

## 📊 데이터베이스 (Drizzle ORM + PostgreSQL)

### AWS Aurora DSQL 연동 (2024-12-27)
Zod 스키마를 Drizzle ORM PostgreSQL 스키마로 변환하여 AWS Aurora DSQL과 호환되도록 구성

### 스키마 구조
- **Users**: 사용자 정보 (Google OAuth, GitHub, 이메일 인증 지원)
- **Wikis**: 위키 메인 테이블 (UUID 기반, JSONB 태그 지원)  
- **WikiContributors**: 위키 기여자 추적
- **WikiHistory**: 전체 스냅샷 방식 버전 관리
- **FavoritesLists**: 사용자별 즐겨찾기 목록
- **FavoritesItems**: 즐겨찾기 아이템

### 주요 특징
- UUID 기본키 사용 (defaultRandom())
- JSONB 타입으로 태그, 설정, 메타데이터 저장
- 적절한 인덱스 설정으로 쿼리 최적화
- CASCADE 삭제로 데이터 무결성 보장
- 유니크 제약조건으로 중복 방지

### 명령어
```bash
# 스키마 변경 후 마이그레이션 생성
npm run db:generate

# 데이터베이스에 마이그레이션 적용  
npm run db:migrate

# Drizzle Studio로 데이터베이스 관리
npm run db:studio

# 스키마를 직접 푸시 (개발용)
npm run db:push
```

### 파일 구조
- `server/db/drizzle-schema.ts`: Drizzle 스키마 정의
- `server/db/drizzle-connection.ts`: 데이터베이스 연결 설정
- `server/db/migrate.ts`: 마이그레이션 실행 스크립트
- `server/db/migrations/`: 생성된 SQL 마이그레이션 파일들
- `drizzle.config.ts`: Drizzle Kit 설정

### 환경 변수
```bash
# AWS Aurora DSQL 연결
DATABASE_URL="postgresql://username:password@your-aurora-dsql-endpoint.amazonaws.com:5432/plero"
```

## 🧪 테스트 시스템

### DB 통합 테스트 완전 재편 (2024-12-27)
모든 DB 모듈에 대해 재사용 가능한 테스트 헬퍼 함수와 체계적인 통합 테스트 구조를 구축했습니다.

#### 파일 구조
- `test/db/wiki.nuxt.test.ts`: Wiki DB 통합 테스트 ✅
- `test/db/favoritesItem.nuxt.test.ts`: 즐겨찾기 아이템 DB 테스트 ✅  
- `test/db/favoritesList.nuxt.test.ts`: 즐겨찾기 목록 DB 테스트 ⚠️
- `test/db/wikiContributor.nuxt.test.ts`: 위키 기여자 DB 테스트 ⚠️
- `test/db/wikiHistory.nuxt.test.ts`: 위키 기록 DB 테스트 ⚠️
- `test/mock.ts`: 모든 DB 엔티티 Mock 헬퍼
- `utils/test-helpers.ts`: 재사용 가능한 테스트 유틸리티

#### Mock 헬퍼 함수 (완전 재설계)
```typescript
// test/mock.ts - 모든 엔티티 지원
import { 
  createMockWiki, 
  createMockFavoritesList, 
  createMockWikiContributor, 
  createMockWikiHistory 
} from '../mock';

// Wiki 생성 (사용자 포함)
const { wiki, mockUser, cleanUpWiki } = await createMockWiki({
  title: 'Custom Title', 
  isPublished: false 
});

// 즐겨찾기 목록 생성
const { favoritesList, mockUser, cleanUpFavoritesList } = await createMockFavoritesList({
  name: 'My Favorites',
  color: '#ff6b6b'
});

// 위키 기여자 생성
const { contributorData, mockUser, cleanUpWikiContributor } = await createMockWikiContributor();

// 위키 기록 생성
const { historyData, mockUser, cleanUpWikiHistory } = await createMockWikiHistory();
```

#### 테스트 유틸리티 (utils/test-helpers.ts)
```typescript
// DB 연결 테스트
await testDbConnection();

// CRUD 검증
await validateWikiCrud(wikiData);

// 페이지네이션 테스트  
await testPagination(totalItems, pageSize, query);

// 검색 기능 테스트
await testSearchFunctionality(searchTerm, expectedCount);

// 대량 데이터 처리
await bulkCreateWikis(count, baseData, titlePrefix);
await bulkDeleteWikis(wikiIds);

// 성능 측정
const { result, executionTime } = await measureOperation(operation);

// 에러 처리 테스트
await testErrorHandling(operation, expectedErrorMessage);
```

#### 커버리지 현황

**✅ Wiki (10/10 테스트 통과)**
- CRUD 작업, 검색/필터링, 페이지네이션, 에러 처리

**✅ FavoritesItem (11/11 테스트 통과)**  
- 즐겨찾기 추가/제거, 중복 방지, 목록별 조회, 사용자별 조회, 카운트

**⚠️ FavoritesList (7/8 테스트, 1개 실패)**
- 기본 목록 생성 실패 (외래 키 제약 조건 문제)

**⚠️ WikiContributor (0/4 테스트 통과)**
- Mock 데이터 구조 개선 필요

**⚠️ WikiHistory (0/5 테스트 통과)**  
- Mock 데이터 구조 개선 필요

**총 통합 테스트: 28/38 개 통과 (73.7%)**

#### 테스트 실행
```bash
# 개별 모듈 테스트
npm test -- --run test/db/wiki.nuxt.test.ts
npm test -- --run test/db/favoritesItem.nuxt.test.ts

# 전체 DB 테스트
npm test -- --run test/db/
```

#### 베스트 프랙티스
1. **타입 가드 사용**: `if (result.success)` 체크 후 안전한 데이터 접근
2. **자동 정리**: 각 테스트 후 생성된 데이터 자동 삭제
3. **재사용성**: 공통 헬퍼 함수로 중복 코드 제거
4. **실제 DB 연동**: PostgreSQL과 직접 연결하여 실제 환경 테스트
5. **독립성**: 각 테스트는 독립적으로 실행 가능
