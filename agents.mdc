# Plero 프로젝트 디자인 시스템

## 🎨 색상 팔레트

### CSS 변수 사용 (assets/css/main.css 기준)
```css
/* 텍스트 색상 */
--ui-text-dimmed: var(--color-neutral-400);     /* 희미한 텍스트 */
--ui-text-muted: var(--color-neutral-500);      /* 보조 텍스트 */
--ui-text-toned: var(--color-neutral-600);      /* 톤 다운된 텍스트 */
--ui-text: var(--color-neutral-700);            /* 기본 텍스트 */
--ui-text-highlighted: var(--color-neutral-900); /* 강조 텍스트 */
--ui-text-inverted: var(--color-white);         /* 반전 텍스트 */

/* 배경 색상 */
--ui-bg: var(--color-white);                    /* 기본 배경 */
--ui-bg-muted: var(--color-neutral-50);         /* 보조 배경 */
--ui-bg-elevated: var(--color-neutral-100);     /* 부각된 배경 */
--ui-bg-accented: var(--color-neutral-200);     /* 강조된 배경 */
--ui-bg-inverted: var(--color-neutral-900);     /* 반전 배경 */

/* 테두리 색상 */
--ui-border: var(--color-neutral-200);          /* 기본 테두리 */
--ui-border-muted: var(--color-neutral-200);    /* 보조 테두리 */
--ui-border-accented: var(--color-neutral-300); /* 강조된 테두리 */
--ui-border-inverted: var(--color-neutral-900); /* 반전 테두리 */

/* 프라이머리 색상 */
--ui-primary: var(--color-indigo-400);          /* 기본 프라이머리 */
--ui-primary-muted: var(--color-indigo-500);    /* 보조 프라이머리 */
--ui-primary-elevated: var(--color-indigo-600); /* 부각된 프라이머리 */
--ui-primary-accented: var(--color-indigo-700); /* 강조된 프라이머리 */
--ui-primary-inverted: var(--color-indigo-800); /* 반전 프라이머리 */
```

### 사용 방법
```css
/* 올바른 방법 */
color: var(--ui-text);
background: var(--ui-bg-muted);

/* 피해야 할 방법 */
color: #374151;
background: #f9fafb;
```

## 🏗️ 레이아웃 패턴

### 1. 페이지 기본 구조
```vue
<template>
    <div class="min-h-screen bg-[var(--ui-bg)]">
        <!-- 상단 헤더 (고정) -->
        <div class="sticky top-0 z-10 bg-[var(--ui-bg)] border-b-[1px] border-[var(--ui-border)] shadow-sm">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <!-- 헤더 내용 -->
            </div>
        </div>

        <!-- 메인 컨텐츠 -->
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <!-- 콘텐츠 -->
        </div>
    </div>
</template>
```

### 2. 헤더 패턴
```vue
<div class="flex justify-between items-center py-4 flex-wrap gap-4">
    <!-- 왼쪽: 브레드크럼/네비게이션 -->
    <div class="flex items-center gap-2 text-sm">
        <button class="flex items-center gap-2 text-[var(--ui-text-muted)] hover:text-[var(--ui-text)] transition-colors duration-200 group">
            <Icon icon="material-symbols:arrow-back" width="20" height="20" class="group-hover:scale-110 transition-transform duration-200" />
            <span class="font-medium">뒤로가기</span>
        </button>
        <div class="ml-2 h-6 w-px bg-[var(--ui-border)]"></div>
        <h1 class="ml-2 text-lg font-semibold text-[var(--ui-text)]">페이지 제목</h1>
    </div>
    
    <!-- 오른쪽: 액션 버튼들 -->
    <div class="flex items-center gap-3">
        <!-- 버튼들 -->
    </div>
</div>
```

### 3. 카드 컴포넌트
```vue
<div class="bg-[var(--ui-bg)] border border-[var(--ui-border)] rounded-xl shadow-sm overflow-hidden">
    <!-- 카드 헤더 (선택사항) -->
    <div class="px-6 py-4 border-b border-[var(--ui-border)] bg-[var(--ui-bg-muted)]">
        <h2 class="text-lg font-semibold text-[var(--ui-text-highlighted)]">카드 제목</h2>
    </div>
    
    <!-- 카드 내용 -->
    <div class="p-6">
        <!-- 콘텐츠 -->
    </div>
</div>
```

## 🔘 버튼 패턴

### 1. 프라이머리 버튼 (강조 액션)
```vue
<button class="flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-[var(--ui-primary)] to-[var(--ui-primary-muted)] text-white rounded-lg hover:from-[var(--ui-primary-muted)] hover:to-[var(--ui-primary-elevated)] transition-all duration-200 shadow-md hover:shadow-lg">
    <Icon icon="material-symbols:save" width="16" height="16" />
    <span class="text-sm font-medium">저장</span>
</button>
```

### 2. 세컨더리 버튼 (보조 액션)
```vue
<button class="flex items-center gap-2 px-3 py-2 text-[var(--ui-text-muted)] hover:text-[var(--ui-text)] border border-[var(--ui-border)] rounded-lg hover:bg-[var(--ui-bg-muted)] transition-all duration-200">
    <Icon icon="material-symbols:edit" width="16" height="16" />
    <span class="text-sm font-medium">편집</span>
</button>
```

### 3. 위험 액션 버튼
```vue
<button class="flex items-center gap-2 px-3 py-2 text-[var(--ui-text-muted)] hover:text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-all duration-200">
    <Icon icon="material-symbols:delete-outline" width="16" height="16" />
    <span class="text-sm font-medium">삭제</span>
</button>
```

## 🎯 아이콘 사용법

### Iconify 사용
```vue
<script setup>
import { Icon } from '@iconify/vue';
</script>

<template>
    <!-- 기본 사용법 -->
    <Icon icon="material-symbols:home-outline" width="20" height="20" />
    
    <!-- 호버 효과와 함께 -->
    <Icon icon="material-symbols:arrow-back" width="20" height="20" class="group-hover:scale-110 transition-transform duration-200" />
</template>
```

### 자주 사용하는 아이콘들
- `material-symbols:arrow-back` - 뒤로가기
- `material-symbols:edit` - 편집
- `material-symbols:save` - 저장
- `material-symbols:delete-outline` - 삭제
- `material-symbols:history` - 변경 기록
- `material-symbols:visibility` - 보기
- `material-symbols:home-outline` - 홈
- `material-symbols:add-circle-outline` - 추가
- `material-symbols:check-circle-outline` - 완료/확인

## 🌙 다크 모드 지원

### CSS 변수 자동 변환
다크 모드는 CSS 변수를 통해 자동으로 처리됩니다. `.dark` 클래스가 적용되면 색상이 자동으로 변경됩니다.

### 특별한 처리가 필요한 경우
```vue
<style scoped>
.my-element {
    @apply bg-green-50 text-green-700;
}

/* 다크 모드 전용 스타일 */
.dark .my-element {
    @apply bg-green-900/20 text-green-300;
}
</style>
```

## 📱 반응형 디자인

### 브레이크포인트 (Tailwind CSS 기준)
- `sm:` - 640px 이상
- `md:` - 768px 이상
- `lg:` - 1024px 이상
- `xl:` - 1280px 이상

### 반응형 패턴 예시
```vue
<div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
    <!-- 모바일: 1열, 데스크톱: 4열 -->
</div>

<div class="flex-col items-start gap-4 lg:flex-row lg:items-center">
    <!-- 모바일: 세로 배치, 데스크톱: 가로 배치 -->
</div>
```

## ✨ 애니메이션 및 트랜지션

### 표준 트랜지션
```css
transition-colors duration-200   /* 색상 변화 */
transition-all duration-200      /* 모든 속성 변화 */
transition-transform duration-200 /* 변형 효과 */
```

### 호버 효과
```vue
<!-- 스케일 효과 -->
<div class="group-hover:scale-110 transition-transform duration-200">

<!-- 이동 효과 -->
<div class="group-hover:translate-x-1 transition-transform duration-200">

<!-- 색상 변화 -->
<div class="hover:text-[var(--ui-text)] transition-colors duration-200">
```

## 🔤 타이포그래피

### 제목 크기
```vue
<h1 class="text-3xl font-bold text-[var(--ui-text-highlighted)]">    <!-- 메인 제목 -->
<h2 class="text-2xl font-bold text-[var(--ui-text-highlighted)]">    <!-- 섹션 제목 -->
<h3 class="text-lg font-semibold text-[var(--ui-text)]">             <!-- 서브 제목 -->
<h4 class="text-sm font-semibold text-[var(--ui-text)]">             <!-- 작은 제목 -->
```

### 본문 텍스트
```vue
<p class="text-[var(--ui-text)]">                    <!-- 기본 텍스트 -->
<span class="text-[var(--ui-text-muted)]">           <!-- 보조 텍스트 -->
<small class="text-xs text-[var(--ui-text-muted)]">  <!-- 작은 텍스트 -->
```

## 🗂️ 코드 및 diff 스타일

### 모노스페이스 폰트
```vue
<div class="font-mono text-sm">
    <!-- 코드 내용 -->
</div>
```

### Diff 색상
```vue
<!-- 추가된 내용 -->
<span class="bg-green-50 text-green-700 dark:bg-green-900/20 dark:text-green-300 px-1 rounded">

<!-- 제거된 내용 -->
<span class="bg-red-50 text-red-700 dark:bg-red-900/20 dark:text-red-300 px-1 rounded line-through">
```

## 📏 간격 및 패딩

### 표준 간격
- `gap-2` (8px) - 작은 요소 간격
- `gap-3` (12px) - 버튼 그룹 간격  
- `gap-4` (16px) - 일반적인 간격
- `gap-6` (24px) - 섹션 간격

### 패딩
- `p-4` (16px) - 작은 카드 패딩
- `p-6` (24px) - 일반적인 카드 패딩
- `px-4 py-2` - 버튼 패딩
- `px-6 py-4` - 카드 헤더 패딩

## 🎛️ 상태 표시

### 로딩 상태
```vue
<Icon v-if="loading" icon="line-md:loading-loop" width="18" height="18" />
```

### 빈 상태
```vue
<div class="text-center py-12">
    <Icon icon="material-symbols:check-circle-outline" width="48" height="48" class="mx-auto text-[var(--ui-text-muted)] mb-4" />
    <h3 class="text-lg font-medium text-[var(--ui-text)] mb-2">데이터 없음</h3>
    <p class="text-[var(--ui-text-muted)]">표시할 내용이 없습니다.</p>
</div>
```

## 🧩 위키 전용 컴포넌트

### FavoriteListItem 컴포넌트
즐겨찾기 목록 아이템을 담당하는 재사용 가능한 컴포넌트입니다.

#### Props
```typescript
interface Props {
    list: FavoritesList;        // 즐겨찾기 목록 데이터
    index: number;              // 목록 인덱스 (체크박스 ID용)
    isChecked: boolean;         // 체크 상태
    isEditing: boolean;         // 편집 모드 여부
    editingName: string;        // 편집 중인 이름
    loading: boolean;           // 로딩 상태
}
```

#### Events
```typescript
interface Emits {
    (e: 'toggle', list: FavoritesList): void;                    // 체크박스 토글
    (e: 'context-menu', event: MouseEvent, list: FavoritesList): void; // 우클릭 컨텍스트 메뉴
    (e: 'start-editing'): void;                                  // 편집 시작
    (e: 'finish-editing', name: string): void;                   // 편집 완료
    (e: 'cancel-editing'): void;                                 // 편집 취소
    (e: 'update-editing-name', name: string): void;              // 편집 중 이름 업데이트
}
```

#### 사용 예시
```vue
<FavoriteListItem 
    :list="list"
    :index="index"
    :is-checked="favoritedListIds.includes(list.id)"
    :is-editing="editingListId === list.id"
    :editing-name="editingListName"
    :loading="loading"
    @toggle="toggleListFavorite"
    @context-menu="showContextMenuHandler"
    @start-editing="startEditingList"
    @finish-editing="finishEditingList"
    @cancel-editing="cancelEditingList"
    @update-editing-name="editingListName = $event" />
```

#### 특징
- **이중 모드 지원**: 일반 표시 모드와 편집 모드 간 전환
- **키보드 지원**: Enter(저장), Escape(취소) 키 지원
- **컨텍스트 메뉴**: 우클릭으로 편집/삭제 메뉴 표시
- **접근성**: 적절한 label과 체크박스 연결
- **상태 표시**: 기본 목록 배지, 즐겨찾기 상태 아이콘

### StarButton 컴포넌트
위키 즐겨찾기 기능을 제공하는 복합 버튼 컴포넌트입니다.

#### Props
```typescript
interface Props {
    wikiId: string;             // 위키 ID
    initialStarCount?: number;  // 초기 스타 수 (서버사이드 렌더링용)
}
```

#### 주요 기능
- **분할 버튼**: 메인 즐겨찾기 버튼 + 드롭다운 토글
- **지연 로딩**: 드롭다운 열 때만 사용자 데이터 로드
- **다중 목록 지원**: 여러 즐겨찾기 목록에 추가/제거 가능
- **목록 관리**: 새 목록 생성, 이름 수정, 목록 삭제
- **실시간 업데이트**: 즐겨찾기 상태 실시간 반영

### WikiPublishButton 컴포넌트
위키 공개/비공개 상태를 관리하는 버튼 컴포넌트입니다.

#### Props
```typescript
interface Props {
    isPublished: boolean;       // 현재 공개 상태
    wikiId: string;             // 위키 ID
    wikiTitle: string;          // 위키 제목 (중복 검사용)
}
```

#### Events
```typescript
interface Emits {
    (e: 'update:isPublished', value: boolean): void;  // 공개 상태 변경
}
```

#### 주요 기능
- **상태별 버튼**: 공개/비공개 상태에 따른 버튼 표시
- **제목 중복 검사**: 공개 시 제목 중복 여부 실시간 확인
- **모달 인터페이스**: 공개 확인 모달 with 상태 표시
- **API 연동**: 실제 서버 상태 업데이트
- **다크모드 지원**: 모든 상태 표시에 다크모드 색상 적용

#### 사용 예시
```vue
<WikiPublishButton 
    :is-published="isPublished" 
    :wiki-id="wikiId" 
    :wiki-title="wikiTitle"
    @update:is-published="handlePublishUpdate" />
```

#### 모달 상태
1. **제목 검사 중**: 로딩 스피너와 함께 "제목 중복 검사 중..." 표시
2. **제목 중복**: 경고 아이콘과 함께 중복 안내, 공개 버튼 비활성화
3. **제목 사용 가능**: 체크 아이콘과 함께 사용 가능 안내, 공개 버튼 활성화
4. **공개 처리 중**: 공개 버튼에 로딩 스피너 표시

### AuthorizePopup 컴포넌트
로그인이 필요한 기능에 접근할 때 표시되는 모달 팝업 컴포넌트입니다.

#### Props
```typescript
interface Props {
    visible?: boolean;          // 팝업 표시 여부
    title?: string;             // 팝업 제목 (기본: "로그인이 필요합니다")
    message?: string;           // 팝업 메시지 (기본: "이 기능을 사용하려면 로그인이 필요합니다.")
    requiredFeature?: string;   // 필요한 기능명 (배지로 표시)
    returnUrl?: string;         // 로그인 후 돌아갈 URL
}
```

#### Events
```typescript
interface Emits {
    (e: 'close'): void;         // 팝업 닫기
    (e: 'login'): void;         // 로그인 버튼 클릭
}
```

#### 사용 예시
```vue
<template>
    <div>
        <!-- 로그인이 필요한 기능 버튼 -->
        <button @click="handleProtectedAction" class="...">
            즐겨찾기 추가
        </button>

        <!-- 인증 팝업 -->
        <AuthorizePopup 
            :visible="showAuthPopup"
            title="즐겨찾기 기능 이용하기"
            message="즐겨찾기를 사용하려면 로그인이 필요합니다."
            required-feature="즐겨찾기"
            :return-url="currentRoute"
            @close="showAuthPopup = false"
            @login="handleLogin" />
    </div>
</template>

<script setup>
const showAuthPopup = ref(false)
const currentRoute = useRoute().fullPath

const handleProtectedAction = () => {
    if (!loggedIn.value) {
        showAuthPopup.value = true
        return
    }
    // 로그인된 경우 실제 기능 실행
    performAction()
}

const handleLogin = () => {
    // 로그인 처리 로직
    showAuthPopup.value = false
}
</script>
```

## 🛡️ 관리자 패널 (AdminPanel)

### 기능 개요
- **위치**: 우측 상단 빨간색 왕관 아이콘 버튼
- **권한**: 관리자 권한(`role: "admin"`)을 가진 사용자만 표시
- **토글**: 버튼 클릭 또는 `Ctrl+Shift+A` 단축키로 패널 열기/닫기
- **현재 기능**: 위키 영구 삭제

### 사용법
```vue
<!-- 관리자 패널 토글 버튼 -->
<button
  v-if="isAdmin"
  @click="toggleAdminPanel"
  class="admin-toggle-btn"
  title="관리자 패널 열기 (Ctrl+Shift+A)"
>
  <Icon icon="mdi:shield-crown" class="text-lg" />
</button>

<!-- 관리자 패널 -->
<AdminPanel
  v-if="isAdmin"
  :visible="adminPanel.visible"
  @toggle="toggleAdminPanel"
/>
```

### 스타일링
```css
.admin-toggle-btn {
  @apply fixed top-4 right-4 z-40;
  @apply bg-red-500 hover:bg-red-600 text-white;
  @apply w-12 h-12 rounded-full shadow-lg;
  @apply flex items-center justify-center;
  @apply transition-all duration-200;
  @apply hover:scale-110 active:scale-95;
}
```

### 위키 삭제 기능
- **API 엔드포인트**: `/admin/wiki/{id}` (DELETE)
- **확인 절차**: 사용자 확인 대화상자 표시
- **영구 삭제**: 위키, 히스토리, 기여자 정보 완전 삭제
- **오류 처리**: 삭제 실패 시 오류 메시지 표시

### 보안 고려사항
- 서버 미들웨어에서 관리자 권한 검증
- 클라이언트에서도 UI 레벨 권한 확인
- 위험한 작업에 대한 확인 절차 필수

### 키보드 단축키
- `Ctrl+Shift+A`: 관리자 패널 토글
- `Escape`: 패널 닫기

## 🚀 최근 완료된 기능 개선사항

### 위키 목록 페이지 성능 개선 (2024-12-27)
**문제**: 더 보기 버튼 클릭 시 페이지 전체가 리로드되어 스크롤 위치가 초기화되는 문제

**해결 방법**:
1. **useFetch watch 옵션 최적화**: `exclusiveStartKey`를 watch 배열에서 제거하여 불필요한 리로드 방지
2. **더 보기 기능 분리**: 별도의 `$fetch` 호출로 추가 데이터만 로드
3. **상태 관리 개선**: `isLoading` 상태로 더 보기 로딩 상태 별도 관리
4. **스크롤 위치 유지**: 페이지 리로드 없이 새 데이터를 기존 배열에 추가

**기술적 구현**:
```javascript
// 더 보기 함수 (별도 $fetch 사용)
const loadMore = async () => {
  if (!pagination.value.hasMore || !exclusiveStartKey.value || isLoading.value) return
  
  isLoading.value = true
  try {
    const response = await $fetch('/api/wiki/list', {
      query: {
        query: debouncedSearch.value,
        exclusiveStartKey: exclusiveStartKey.value,
        limit: limit.value,
      }
    })
    
    if (response?.data?.wikis) {
      // 기존 결과에 추가 (페이지 리로드 없음)
      allWikis.value.push(...response.data.wikis)
      
      // 페이지네이션 정보 업데이트
      if (response.pagination?.lastEvaluatedKey) {
        exclusiveStartKey.value = response.pagination.lastEvaluatedKey
      }
    }
  } catch (error) {
    console.error('더 보기 로드 실패:', error)
  } finally {
    isLoading.value = false
  }
}
```

**사용자 경험 개선**:
- ✅ 더 보기 클릭 시 스크롤 위치 유지
- ✅ 페이지 리로드 없이 부드러운 콘텐츠 로딩
- ✅ 별도 로딩 상태 표시로 사용자 피드백 개선
- ✅ 중복 클릭 방지로 안정성 향상

### 히스토리 페이지 페이지네이션 구현 (2024-12-27)
**기능**: 사용자별 히스토리 페이지에 키 기반 페이지네이션 시스템 구현

**구현 내용**:
1. **백엔드 API 개선**:
   - `getWikiHistoriesByUserId` 함수에 페이지네이션 옵션 추가
   - `exclusiveStartKey`, `limit` 파라미터 지원
   - DynamoDB Query 명령에 페이지네이션 파라미터 적용

2. **API 엔드포인트 업데이트**:
   ```typescript
   // /api/history/list
   const { userId, exclusiveStartKey, limit } = getQuery(event)
   const result = await getWikiHistoriesByUserId({
     userId,
     exclusiveStartKey,
     limit: limit ? parseInt(limit) : 30
   })
   ```

3. **프론트엔드 구현**:
   - 위키 목록 페이지와 동일한 패턴 적용
   - 로딩 스켈레톤, 빈 상태, 더 보기 버튼 구현
   - 스크롤 위치 유지 및 부드러운 로딩 경험

**기술적 특징**:
- **키 기반 페이지네이션**: DynamoDB의 `LastEvaluatedKey` 활용
- **성능 최적화**: 필요한 만큼만 데이터 로드
- **상태 관리**: 로딩 상태 분리로 UX 개선
- **일관된 패턴**: 위키 목록과 동일한 구현 방식

**사용자 경험**:
- ✅ 대용량 히스토리 데이터 효율적 로딩
- ✅ 스크롤 위치 유지
- ✅ 로딩 상태 시각적 피드백
- ✅ 반응형 디자인 적용

description:
globs:
alwaysApply: true
---
